// Prisma schema for PostgreSQL
// Run: npx prisma generate && npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// RBAC
model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Pharmacy and Warehouses
model Pharmacy {
  id         String      @id @default(uuid())
  name       String
  gln        String?     @unique
  address    String?
  city       String?
  country    String?     @default("TR")
  warehouses Warehouse[]
  orders     Order[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Warehouse {
  id          String      @id @default(uuid())
  pharmacyId  String
  pharmacy    Pharmacy    @relation(fields: [pharmacyId], references: [id])
  name        String
  address     String?
  city        String?
  country     String?     @default("TR")
  inventories Inventory[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([pharmacyId])
}

// Manufacturers
model Manufacturer {
  id        String    @id @default(uuid())
  name      String    @unique
  country   String?   @default("TR")
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Categories (hierarchical)
model Category {
  id       String     @id @default(uuid())
  name     String
  parentId String?
  parent   Category?  @relation("CategoryToChildren", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToChildren")
  products Product[]

  @@index([parentId])
}

// Products and barcodes
model Product {
  id             String       @id @default(uuid())
  name           String
  dosage         String?
  form           String?
  imageUrl       String?
  manufacturerId String
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])
  categoryId     String?
  category       Category?    @relation(fields: [categoryId], references: [id])
  prescription   String? // e.g., Beyaz, Kırmızı
  barcodes       Barcode[]
  batches        Batch[]
  prices         Price[]
  orderItems     OrderItem[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([manufacturerId])
  @@index([categoryId])
}

model Barcode {
  id        String  @id @default(uuid())
  code      String  @unique
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

// Batch (lot) and Inventory
model Batch {
  id           String      @id @default(uuid())
  productId    String
  product      Product     @relation(fields: [productId], references: [id])
  lotNumber    String
  expirationAt DateTime
  inventories  Inventory[]
  orderItems   OrderItem[]

  @@index([productId])
  @@index([expirationAt])
}

model Inventory {
  id          String    @id @default(uuid())
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  batchId     String
  batch       Batch     @relation(fields: [batchId], references: [id])
  quantity    Int       @default(0)
  reserved    Int       @default(0)
  updatedAt   DateTime  @updatedAt

  @@unique([warehouseId, batchId])
  @@index([warehouseId])
  @@index([batchId])
}

// Pricing
model Price {
  id        String    @id @default(uuid())
  productId String
  product   Product   @relation(fields: [productId], references: [id])
  basePrice Decimal
  currency  String    @default("TRY")
  validFrom DateTime  @default(now())
  validTo   DateTime?

  @@index([productId])
  @@index([validFrom, validTo])
}

// Orders
model Order {
  id          String      @id @default(uuid())
  pharmacyId  String
  pharmacy    Pharmacy    @relation(fields: [pharmacyId], references: [id])
  status      String      @default("draft") // draft, placed, shipped, completed, cancelled
  totalAmount Decimal
  currency    String      @default("TRY")
  placedAt    DateTime?
  orderItems  OrderItem[]
  shipments   Shipment[]
  payments    Payment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([pharmacyId])
  @@index([status])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  batchId   String?
  batch     Batch?  @relation(fields: [batchId], references: [id])
  quantity  Int
  unitPrice Decimal
  currency  String  @default("TRY")

  @@index([orderId])
  @@index([productId])
  @@index([batchId])
}

// Shipment & Payment (minimal MVP)
model Shipment {
  id          String    @id @default(uuid())
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id])
  status      String    @default("preparing") // preparing, shipped, delivered, returned
  shippedAt   DateTime?
  deliveredAt DateTime?

  @@index([orderId])
  @@index([status])
}

model Payment {
  id       String    @id @default(uuid())
  orderId  String
  order    Order     @relation(fields: [orderId], references: [id])
  method   String // transfer, card, etc.
  amount   Decimal
  currency String    @default("TRY")
  paidAt   DateTime?

  @@index([orderId])
}
